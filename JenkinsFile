pipeline {
    agent any
    stages {
        stage('Pre-Build Scan') {
            steps {
                sh 'echo "Running TruffleHog Scan!"'
                sh 'docker run -it -v "$PWD:/pwd" trufflesecurity/trufflehog:latest github --repo https://github.com/supriyasupekar26/PythonVulnApp.git --token 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 --no-verification --json --fail'
            }
        }
        stage('SonarQube analysis') {
        sonar_project_name = "${PythonVulnApp}"
        sonar_project_key = "${PythonVulnApp}"
        currDir = "${WORKSPACE}"
        def scannerHome = tool 'sonar_scanner';           

        withSonarQubeEnv() {
            sh """ ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=sonar_project_key \
                    -Dsonar.projectName=sonar_project_name \
                    -Dsonar.projectVersion=${BUILD_NUMBER}-${args.git_branch_name} \
                    """
        }       
        timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
            def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
            if (qg.status != 'OK') {
            error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
    }
}
}
